diff --git a/CMakeLists.txt b/CMakeLists.txt
index 608babbeb..a006b45fc 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,7 +20,7 @@ find_package(kdl_parser REQUIRED)
 find_package(moveit_msgs REQUIRED)
 # Enforce system version liboctomap-dev
 # https://github.com/moveit/moveit2/issues/2862
-find_package(octomap 1.9.7...<1.10.0 REQUIRED)
+find_package(octomap REQUIRED)
 find_package(octomap_msgs REQUIRED)
 find_package(osqp REQUIRED)
 find_package(pluginlib REQUIRED)
diff --git a/collision_detection/include/moveit/collision_detection/collision_common.hpp b/collision_detection/include/moveit/collision_detection/collision_common.hpp
index 19777a044..af3a89442 100644
--- a/collision_detection/include/moveit/collision_detection/collision_common.hpp
+++ b/collision_detection/include/moveit/collision_detection/collision_common.hpp
@@ -141,7 +141,33 @@ struct CostSource
   }
 };
 
-struct CollisionResult;
+/** \brief Representation of a collision checking result */
+struct CollisionResult
+{
+  using ContactMap = std::map<std::pair<std::string, std::string>, std::vector<Contact> >;
+  EIGEN_MAKE_ALIGNED_OPERATOR_NEW
+  /** \brief Clear a previously stored result */
+  void clear()
+  {
+    collision = false;
+    distance = std::numeric_limits<double>::max();
+    contact_count = 0;
+    contacts.clear();
+    cost_sources.clear();
+  }
+  /** \brief Throttled warning printing the first collision pair, if any. All collisions are logged at DEBUG level */
+  void print() const;
+  /** \brief True if collision was found, false otherwise */
+  bool collision = false;
+  /** \brief Closest distance between two bodies */
+  double distance = std::numeric_limits<double>::max();
+  /** \brief Number of contacts returned */
+  std::size_t contact_count = 0;
+  /** \brief A map returning the pairs of body ids in contact, plus their contact details */
+  ContactMap contacts;
+  /** \brief These are the individual cost sources when costs are computed */
+  std::set<CostSource> cost_sources;
+};
 
 /** \brief Representation of a collision checking request */
 struct CollisionRequest
@@ -159,9 +185,6 @@ struct CollisionRequest
   /** \brief If true, compute proximity distance */
   bool distance = false;
 
-  /** \brief If true, return detailed distance information. Distance must be set to true as well */
-  bool detailed_distance = false;
-
   /** \brief If true, a collision cost is computed */
   bool cost = false;
 
@@ -330,42 +353,4 @@ struct DistanceResult
   }
 };
 
-/** \brief Representation of a collision checking result */
-struct CollisionResult
-{
-  EIGEN_MAKE_ALIGNED_OPERATOR_NEW
-
-  /** \brief Clear a previously stored result */
-  void clear()
-  {
-    collision = false;
-    distance = std::numeric_limits<double>::max();
-    distance_result.clear();
-    contact_count = 0;
-    contacts.clear();
-    cost_sources.clear();
-  }
-
-  /** \brief Throttled warning printing the first collision pair, if any. All collisions are logged at DEBUG level */
-  void print() const;
-
-  /** \brief True if collision was found, false otherwise */
-  bool collision = false;
-
-  /** \brief Closest distance between two bodies */
-  double distance = std::numeric_limits<double>::max();
-
-  /** \brief Distance data for each link */
-  DistanceResult distance_result;
-
-  /** \brief Number of contacts returned */
-  std::size_t contact_count = 0;
-
-  /** \brief A map returning the pairs of body ids in contact, plus their contact details */
-  using ContactMap = std::map<std::pair<std::string, std::string>, std::vector<Contact> >;
-  ContactMap contacts;
-
-  /** \brief These are the individual cost sources when costs are computed */
-  std::set<CostSource> cost_sources;
-};
 }  // namespace collision_detection
diff --git a/collision_detection_fcl/src/collision_env_fcl.cpp b/collision_detection_fcl/src/collision_env_fcl.cpp
index b57e0767e..c655ed069 100644
--- a/collision_detection_fcl/src/collision_env_fcl.cpp
+++ b/collision_detection_fcl/src/collision_env_fcl.cpp
@@ -290,10 +290,6 @@ void CollisionEnvFCL::checkSelfCollisionHelper(const CollisionRequest& req, Coll
     dreq.enableGroup(getRobotModel());
     distanceSelf(dreq, dres, state);
     res.distance = dres.minimum_distance.distance;
-    if (req.detailed_distance)
-    {
-      res.distance_result = dres;
-    }
   }
 }
 
@@ -347,10 +343,6 @@ void CollisionEnvFCL::checkRobotCollisionHelper(const CollisionRequest& req, Col
     dreq.enableGroup(getRobotModel());
     distanceRobot(dreq, dres, state);
     res.distance = dres.minimum_distance.distance;
-    if (req.detailed_distance)
-    {
-      res.distance_result = dres;
-    }
   }
 }
 
